package vaccinationbookingsystem.GUI.CustomerUI;

import vaccinationbookingsystem.GUI.customerAppoitment;
import java.util.ArrayList;

import vaccinationbookingsystem.Appoinment;
import vaccinationbookingsystem.Customer;
import vaccinationbookingsystem.Person;
import vaccinationbookingsystem.Database.databaseController;
import vaccinationbookingsystem.helper.Helper;
import java.text.SimpleDateFormat;


/**
 *
 * @author Omar essam
 */
public class CustomerVaccine extends javax.swing.JFrame {
    private String customerName = "";
    private String cusotmerID = "";
    /**
     * Creates new form customerProfile2
     */
    public CustomerVaccine(String customerName, String cusotmerID) {
        this.customerName = customerName;
        this.cusotmerID = cusotmerID;
        initComponents();
    }
    public CustomerVaccine(String cusotmerID) {
        this.customerName = customerName;
        this.cusotmerID = cusotmerID;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cusomterProfileLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        mainHeading = new javax.swing.JLabel();
        vaccineTypeLabel = new javax.swing.JLabel();
        vaccineListField = new javax.swing.JComboBox<>();
        availableDateLabel = new javax.swing.JLabel();
        bookButton = new javax.swing.JButton();
        chosenDate = new com.toedter.calendar.JDateChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        setting = new javax.swing.JMenu();
        appointmentICon = new javax.swing.JMenuItem();
        profileIcon = new javax.swing.JMenuItem();
        logOutIcon = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cusomterProfileLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaccinationbookingsystem/Assets/user-icon.png"))); // NOI18N

        mainHeading.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        mainHeading.setText("Book Your Vaccine !");

        vaccineTypeLabel.setText("Vaccine  Type:");

        vaccineListField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pizer", "Astrazeneca ", "Moderna", "Janssen " }));

        availableDateLabel.setText("Available Date:");

        bookButton.setText("Book");
        bookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookButtonActionPerformed(evt);
            }
        });

        setting.setText("Settings");
        setting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionPerformed(evt);
            }
        });

        appointmentICon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaccinationbookingsystem/Assets/appointment-icon.png"))); // NOI18N
        appointmentICon.setText("Appoinment");
        appointmentICon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        appointmentICon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentIConActionPerformed(evt);
            }
        });
        setting.add(appointmentICon);

        profileIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaccinationbookingsystem/Assets/account-icon.png"))); // NOI18N
        profileIcon.setText("Profile");
        profileIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        profileIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileIconActionPerformed(evt);
            }
        });
        setting.add(profileIcon);

        logOutIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaccinationbookingsystem/Assets/logout-icon.png"))); // NOI18N
        logOutIcon.setText("Logout");
        logOutIcon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logOutIcon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutIconActionPerformed(evt);
            }
        });
        setting.add(logOutIcon);

        jMenuBar1.add(setting);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(cusomterProfileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(vaccineTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(availableDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vaccineListField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chosenDate, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mainHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
            .addGroup(layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(bookButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cusomterProfileLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(mainHeading)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(vaccineListField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(vaccineTypeLabel))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(availableDateLabel)
                    .addComponent(chosenDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(bookButton)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  if the user clicked on the appointment icon, the system should dispaly all the avialable appointment that have beeen mdde
     * @param evt
     */

    private void appointmentIConActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_appointmentIConActionPerformed
        try {
            String passportNo = this.cusotmerID;
            vaccineListField = null;

            boolean isAppoinmentExist = false;
            Person person = new Person();
            ArrayList<Appoinment> databaseData = person.getAppointmentData();
            for (Appoinment appoinment : databaseData) {
                if (appoinment.getCustomer().getPassprotNumber().equals(passportNo)) {
                    ArrayList<Appoinment> customerAppoinments = new ArrayList<Appoinment>();
                    customerAppoinments.add(new Appoinment(appoinment.getReferenceNo(), 
                            appoinment.getDate(),
                            appoinment.getCustomer().getPassprotNumber(),
                            appoinment.getVaccine().getName()));

                    isAppoinmentExist = true;
                }
            }
            if (isAppoinmentExist) {

                new customerAppoitment(passportNo).setVisible(true);
                dispose();
            } else {
                Helper.showDialogMessage("you didn't make any appoitnemnts yet", "info");
            }

        } catch (Exception e) {
            Helper.showDialogMessage(e.toString(), "error");
        }
    }// GEN-LAST:event_appointmentIConActionPerformed

    /**
     * if the user clicked on the logout page, the system should redirect the user to the home paeg
     * @param evt
     */
    private void logOutIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutIconActionPerformed
        Helper.redirectToHomePage();
        dispose();
    }//GEN-LAST:event_logOutIconActionPerformed

/**
 * if the user clicked on the profile, the system will redirect the user to his/her personal information, and enable to edit it 
 * @param evt
 */
    private void profileIconActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileIconActionPerformed
        ArrayList<Person> person = databaseController.getDataFromDatabase("Customer"); // get a list of customer that are stored in the databse
        Person p = null;
        for (Person person2 : person) {  
            if(person2.getPassprotNumber().equals(cusotmerID)) { // if this cutomer ID is equal the catched data from database
                p = person2; // assign this customer to the p object
                break;
            }
        }
        new CustomerProfile(p).setVisible(true);
        dispose();
    }//GEN-LAST:event_profileIconActionPerformed


    /**
     * IF the user clicked  on the book button, the system will save the booking information in the database 
     * @param evt
     */

    private void bookButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bookButtonActionPerformed

        Customer customer = new Customer();
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");  // specify the format in whihc the date will be stored
        try {
            customer.makeAppoinment(vaccineListField.getSelectedItem().toString(),
                    dateFormat.format(chosenDate.getDate()), cusotmerID);
            databaseController
                    .insertToTable(databaseController.appointmentTableQuery(customer.getAppoinment().getDate(),
                            customer.getAppoinment().getCustomer().getPassprotNumber(),
                            customer.getAppoinment().getVaccine().getName()));
            Helper.showDialogMessage("Successfully booked", "info");
        } catch (Exception e) {
            Helper.showDialogMessage("An error happened, Please try again", "info");
        }
    }//

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem appointmentICon;
    private javax.swing.JLabel availableDateLabel;
    private javax.swing.JButton bookButton;
    private com.toedter.calendar.JDateChooser chosenDate;
    private javax.swing.JLabel cusomterProfileLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem logOutIcon;
    private javax.swing.JLabel mainHeading;
    private javax.swing.JMenuItem profileIcon;
    private javax.swing.JMenu setting;
    private javax.swing.JComboBox<String> vaccineListField;
    private javax.swing.JLabel vaccineTypeLabel;
    // End of variables declaration//GEN-END:variables
}
